{"version":3,"sources":["components/TodoListInput.js","components/TodoListItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoListInput","props","confirm","state","value","trim","onConfirm","setState","onInputChange","event","target","onKeyPress","key","className","type","placeholder","this","onChange","onClick","React","Component","defaultProps","TodoListItem","toggle","onToggle","id","checked","content","onRemove","TodoList","addItem","items","push","lastIndex","removeItem","index","findItemIndexById","splice","clearList","clearStorage","localStorage","save","setItem","JSON","stringify","load","data","getItem","parse","item","onItemToggle","newCheckedState","reset","loadOrFillWithExample","exampleFill","findIndex","element","map","title","hidden","renderItems","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ee48ae6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n/**\r\n * An input component for the TodoList\r\n */\r\nexport default class TodoListInput extends React.Component {\r\n\r\n    static defaultProps = {\r\n        placeholder: 'Title...',\r\n    }\r\n\r\n    static propTypes = {\r\n        onConfirm: PropTypes.func.isRequired,\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Reset state.value and ask the list for adding an item\r\n     */\r\n    confirm = () => {\r\n        if (this.state.value.trim()) {\r\n            this.props.onConfirm(this.state.value);\r\n            this.setState({ value: '' });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update state on every change in the input\r\n     */\r\n    onInputChange = (event) => {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    /**\r\n     * Add an item by pressing enter\r\n     */\r\n    onKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            this.confirm();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Render this component\r\n     */\r\n    render() {\r\n        return (\r\n            <div className='TodoListInput'>\r\n                <input type='text' placeholder={this.props.placeholder} onKeyPress={this.onKeyPress} onChange={this.onInputChange} value={this.state.value}></input>\r\n                <input type=\"button\" value=\"Add\" onClick={this.confirm} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n/**\r\n * A TodoListItem component\r\n */\r\nexport default class TodoListItem extends React.Component {\r\n\r\n    static defaultProps = {\r\n        content: '',\r\n        checked: false,\r\n    }\r\n\r\n    static propTypes = {\r\n        id: PropTypes.number.isRequired,\r\n        content: PropTypes.string,\r\n        checked: PropTypes.bool,\r\n        onRemove: PropTypes.func.isRequired,\r\n        onToggle: PropTypes.func.isRequired,\r\n    }\r\n\r\n    /**\r\n     * Ask the list container to toggle the state of the item\r\n     */\r\n    toggle = () => {\r\n        this.props.onToggle(this.props.id, !this.props.checked);\r\n    }\r\n\r\n    /**\r\n     * Render this component\r\n     */\r\n    render() {\r\n        return (\r\n            <div className={`TodoListItem ${this.props.checked ? 'checked' : ''}`} onClick={this.toggle}>\r\n                <span className=\"TodoListItem-check \"></span>\r\n                <span className=\"TodoListItem-content\">{this.props.content}</span>\r\n                <span className='TodoListItem-remove' onClick={() => { this.props.onRemove(this.props.id) }}>âœ—</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TodoListInput from './TodoListInput';\r\nimport TodoListItem from './TodoListItem';\r\n\r\n\r\n/**\r\n * A TodoList component\r\n */\r\nexport default class TodoList extends React.Component {\r\n\r\n    static defaultProps = {\r\n        title: 'Todo List',\r\n    };\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string,\r\n    };\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.lastIndex = 0;\r\n        this.items = [];\r\n        this.state = { items: [] };\r\n    }\r\n\r\n    /**\r\n     * Add some default items to the list\r\n     */\r\n    componentDidMount() {\r\n        this.loadOrFillWithExample();\r\n    }\r\n\r\n    /**\r\n     * Load items from localstorage\r\n     * If loading fails, fill with example items\r\n     */\r\n    loadOrFillWithExample() {\r\n        let loadingSuccess = this.load();\r\n        if (!loadingSuccess) {\r\n            this.exampleFill();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add some example items to the list\r\n     */\r\n    exampleFill() {\r\n        this.addItem('Buy eggs');\r\n        this.addItem('Read a book', true);\r\n        this.addItem('Organize office');\r\n        this.addItem('Send a letter');\r\n    }\r\n\r\n    /**\r\n     * Find the index of an item from its ID\r\n     */\r\n    findItemIndexById(id) {\r\n        let index = this.items.findIndex(element => { return element[0] === id });\r\n        return index !== -1 ? index : null;\r\n    }\r\n\r\n    /**\r\n     * Add an item to the list\r\n     */\r\n    addItem = (value, checked = false) => {\r\n        this.items.push([this.lastIndex++, value, checked])\r\n        this.setState({ items: this.items });\r\n    }\r\n\r\n    /**\r\n     * Remove an item by its ID\r\n     */\r\n    removeItem = (id) => {\r\n        let index = this.findItemIndexById(id);\r\n        if (index !== null) {\r\n            this.items.splice(index, 1);\r\n            this.setState({ items: this.items });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all items from the list\r\n     */\r\n    clearList = () => {\r\n        this.items = [];\r\n        this.setState({ items: this.items });\r\n    }\r\n\r\n    /**\r\n     * Clear the localstorage data for the list\r\n     */\r\n    clearStorage = () => {\r\n        localStorage.removeItem('data');\r\n    }\r\n\r\n    /**\r\n     * Save the list to localstorage\r\n     */\r\n    save = () => {\r\n        localStorage.setItem('data', JSON.stringify(this.items));\r\n    }\r\n\r\n    /**\r\n     * Load the list from localstorage\r\n     */\r\n    load = () => {\r\n        let data = localStorage.getItem('data');\r\n        if (data !== null) {\r\n            let items = JSON.parse(data);\r\n            for (let item of items) {\r\n                this.addItem(item[1], item[2]);\r\n            }\r\n            // this.setState({ items: this.items });\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Update the state [checked/unchecked] of an item\r\n     */\r\n    onItemToggle = (id, newCheckedState) => {\r\n        let index = this.findItemIndexById(id);\r\n        if (index !== null) {\r\n            this.items[index][2] = newCheckedState;\r\n            this.setState({ items: this.items });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore the list to its initial state\r\n     */\r\n    reset = () => {\r\n        this.clearList();\r\n        this.clearStorage();\r\n        this.loadOrFillWithExample();\r\n    }\r\n\r\n    /**\r\n     * Save to localstorage after every component update\r\n     */\r\n    componentDidUpdate() {\r\n        this.save();\r\n    }\r\n\r\n    /**\r\n     * Render the items\r\n     */\r\n    renderItems() {\r\n        return this.state.items.map((item) => {\r\n            let id = item[0];\r\n            let value = item[1];\r\n            let checked = item[2];\r\n            return (\r\n                <TodoListItem content={value}\r\n                    onRemove={this.removeItem}\r\n                    checked={checked}\r\n                    key={id}\r\n                    id={id}\r\n                    onToggle={this.onItemToggle}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render this component\r\n     */\r\n    render() {\r\n        return (\r\n            <div className='TodoList'>\r\n                <div className=\"TodoList-header\">\r\n                    <h2>{this.props.title}</h2>\r\n                    <div className=\"ListOptions\" hidden>\r\n                        <input type=\"button\" value=\"Clear\" onClick={this.clearList} />\r\n                        <input type=\"button\" value=\"Reset\" onClick={this.reset} />\r\n                        <input type=\"button\" value=\"Save\" onClick={this.save} />\r\n                        <input type=\"button\" value=\"Load\" onClick={this.load} />\r\n                    </div>\r\n                    <TodoListInput onConfirm={this.addItem} />\r\n                </div>\r\n                {this.renderItems()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TodoList title='My Todo List' />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}